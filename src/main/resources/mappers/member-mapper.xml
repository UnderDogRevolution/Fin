<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<!-- mapper 시작태그에 namespace를 반드시 작성할 것!!!!!! -->


	<!-- 
		resultMap  
		- SELECT 조회 결과(ResultSet) 컬럼명과
		  컬럼 값을 옮겨 담을 VO의 필드명이 같지 않을 때
		  이를 매핑 시켜 SELECT시 자동으로 담기게하는 역할
	 
	 
	 	-속성
	 	type : 연결할 VO (패키지명 + 클래스명 또는 별칭)
	 	id : 만들어진 resultMap을 지칭할 식별명(이름)
	 	
	 	<id> 태그 : PK 역할 컬럼 - 필드 매핑
	 	<result> 태그 : <id>제외 나머지
	 -->
	 
	 
	 <resultMap type="com.movie.sns.member.model.vo.Member" id="member_rm">
	 
	 	<id property="memberNo" column="MEMBER_NO" />
	 
	 	<result property="memberName" 	 		column="MEMBER_NM"/>
	 	<result property="memberNickName" 	 	column="MEMBER_NICKNM"/>
	 	<result property="memberPw" 	 		column="MEMBER_PW"/>
	 	<result property="memberEmail" 	 		column="MEMBER_EMAIL"/>
	 	<result property="enrollDate"   		column="ENROLL_DT"/>
	 	<result property="modifyDate" 			column="MODIFY_DT"/>
	 	<result property="memberStatusCode" 	 column="STATUS_CD"/>
	 	<result property="memberGradeCode" 	 	column="GRADE_CD"/>
	 
	 </resultMap>
	 
	 
	 <!-- 
	 	SQL 작성 태그 속성
	 	- parameterType : SQL 호출 시 전달 받은 매개 변수의 자료형
	 					  (자료형은 패키지+클래스명 또는 별칭으로 작성)
	  
	  	(SELECT에서만 사용 가능한 속성)
	    - resultType : SELECT 결과 열이 1개인 경우 해당 컬럼 값을 저장할 JAVA 자료형 작성
	    
	 	- resultMap : SELECT 결과 열이 N개인 경우 각 컬럼 값을 VO에 저장하기 위해
	 				  알맞게 매핑시켜둔 <resultMap> id 값 작성 
	 	
	  -->
	 
	 
	 <!-- 
	 	마이바티스에서 사용하는 "#", "$" 기호
	 	"#" : pstmt   /  "$" : stmt
	 	
	 	ex) 전달 받은 파라미터 memberId = "user01"
	 	#{memberId}  ->  'user01'  (양쪽 홑따옴표 추가(문자열만))
	 	${memberId}  ->   user01   (아무것도 붙이지 않음)
	  -->
	 
	 <!-- 로그인 -->
	 <select id="login" parameterType="string"  resultMap="member_rm">
	 	SELECT * FROM MEMBER
	 	WHERE MEMBER_EMAIL = #{memberEmail}
	 	AND STATUS_CD = 200
	 	AND GRADE_CD = 100
	 </select>
	 
	 
	 <!-- 아이디 중복 검사 -->
	 <!-- 
	 	int자료형 별칭 : _int
	 	Integer 별칭  : int
	  -->
	 <select id="idDupCheck" parameterType="string" resultType="_int">
	 	SELECT COUNT(*) FROM MEMBER
		WHERE MEMBER_ID = #{inputId}
		AND STATUS_CD != 2
	 </select>
	 
	 
	 <!-- 이메일 중복 검사 -->
	 <select id="emailDupCheck" parameterType="string" resultType="_int">
	 	SELECT COUNT(*) FROM MEMBER
		WHERE MEMBER_EMAIL = #{inputEmail}
		AND STATUS_CD != 2
	 </select>
	 
	 
	 <!-- 회원 가입 -->			<!-- Member VO 별칭 -->
	 <insert id="signUp" parameterType="Member">
	 	INSERT INTO MEMBER VALUES(
	 		SEQ_MEMBER_NO.NEXTVAL, #{memberId}, #{memberPw},
	 	<!-- 	#{memberName}, #{memberPhone}, #{memberEmail}, #{memberAddress}, //번호,주소 안쓰이고 생일, 닉네임으로 변경-->
	 		DEFAULT, DEFAULT, DEFAULT )
	 </insert>
	 
	 
	 
	 <!-- 회원 정보 수정 -->
	 <update id="updateMember">
	 	UPDATE MEMBER SET 
	 	MEMBER_EMAIL = #{memberEmail},
	 	MEMBER_NICKNAME = #{memberNickName},
	 	MEMBER_BIRTH = #{memberBirth}
	 	WHERE MEMBER_NO = #{memberNo}
	 </update>
	 
	 <!-- 현재 DB에 저장된 암호화된 비밀번호 조회 -->
	 <select id="selectSavePw" resultType="string">
	 	SELECT MEMBER_PW FROM MEMBER
	 	WHERE MEMBER_NO = #{memberNo}
	 </select>
	 
	 <!-- 비밀번호 변경 -->
	 <!--  parameterType="map" 생략 가능 -->
	 <update id="updatePw" parameterType="map">
	 	UPDATE MEMBER SET
	 	MEMBER_PW = #{newPw}
	 	WHERE MEMBER_NO = #{memberNo}
	 </update>
	
	
	
	
	 <!--
	 	SQL 구문에 파라미터 작성하는 방법 
	 	1. 파라미터가 단일 자료형 : #{변수명(아무거나)}
	 	2. 파라미터가 VO          : #{필드명}  (단, vo에 getter가 작성되어 있어야 함.)
	 	3. 파라미터가 Map         : #{key}  -> 해당 위치에 value가 작성됨. 
	 	4. 파라미터가 List/Set    : 동적 SQL foreach 태그 사용 
	 -->
	 
	 <!-- 게시글 이미지 목록 삽입 -->
	
	<!-- 파일 정보 List(imgList) 반복 삽입 -->
	
	<!-- 동적 SQL : 마이바티스의 핵심 기능으로 SQL 수행 중 
					조건, 반복, 특정 구문 추가 등을 동적으로 수행할 수 있음. -->
					
	<!--  <foreach> 태그
		- collection : 반복 접근할 컬렉션 형태의 파라미터
		- item : collection에서 반복 시 마다 순차적으로 하나씩 접근한 요소
		- index : 현재 반복 인덱스
		- open : forEach 시작 전 추가할 구문
		- close : forEach 종료 후 추가할 구문
		- separator : 반복 시 마다 SQL 사이에 추가할 구분자
	 -->
	
	<insert id="insertImgList" parameterType="list">
		INSERT INTO MEMBER_IMG
		SELECT SEQ_IMG_NO.NEXTVAL, A.* FROM
		
		<foreach collection="list" item="img"
				open="("    close=") A"   separator=" UNION ALL ">
			SELECT #{img.imgPath} IMG_PATH, 
				   #{img.imgName} IMG_NM,
				   #{img.imgOriginal} IMG_ORIGINAL,
				   #{img.imgLevel} IMG_LEVEL,
				   #{img.MemberNo} MEMBER_NO 
			FROM DUAL 
		</foreach>
		
	</insert>

	<!-- 기존에 있었지만 삭제된 이미지 DELETE -->
	<!-- 파라미터 타입이 Map인 경우  #{Key}를 작성하면 Value가 출력됨 -->
	<delete id="deleteImages" parameterType="map">
		DELETE FROM MEMBER_IMG
		WHERE MEMBER_NO = #{MemberNo}
		AND IMG_LEVEL IN ( ${deleteImages} )
	</delete> 



	<!-- 게시글 이미지 수정 -->
	<update id="updateImage">
		UPDATE MEMBER_IMG SET
		IMG_PATH = #{imgPath},
		IMG_NM = #{imgName},
		IMG_ORIGINAL = #{imgOriginal}
		WHERE MEMBER_NO = #{memberNo}
		AND IMG_LEVEL = #{imgLevel}
	</update>
	
	<!-- 게시글 이미지 삽입 -->
	<insert id="insertImage">
		INSERT INTO MEMBER_IMG VALUES
		(SEQ_IMG_NO.NEXTVAL, #{imgPath}, #{imgName}, #{imgOriginal}, #{imgLevel}, #{memberNo})
	</insert>




	<!-- 이미지 파일명 목록 조회 -->
	<select id="selectImgList" resultType="string">
		SELECT IMG_NM FROM MEMBER_IMG
	</select>
	 
	 
	<!-- 회원 탈퇴 -->
	<update id="secession">
		UPDATE MEMBER SET
		STATUS_CD = 2
		WHERE MEMBER_NO = #{memberNo}
   	</update>
	 
	 
	 
	 


</mapper>
